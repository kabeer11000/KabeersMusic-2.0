{
  "version": 3,
  "sources": [
    "../node_modules/@material-ui/icons/esm/Close.js",
    "components/Player/CustomMiniPlayerSlider.js",
    "components/Player/MiniPlayer.js"
  ],
  "names": [
    "Close",
    "Object",
    "createSvgIcon",
    "react_default",
    "a",
    "createElement",
    "d",
    "connect",
    "state",
    "componentState",
    "currentSong",
    "audioElement",
    "props",
    "MiniPlayer",
    "Fragment",
    "_React$useState",
    "React",
    "useState",
    "currentTime",
    "_React$useState2",
    "slicedToArray",
    "scrubbing",
    "setScrubbing",
    "handleScrubbing",
    "_x",
    "_handleScrubbing",
    "apply",
    "this",
    "arguments",
    "asyncToGenerator",
    "regenerator_default",
    "mark",
    "_callee2",
    "v",
    "wrap",
    "_context2",
    "prev",
    "next",
    "isFinite",
    "store",
    "dispatch",
    "setCurrentSongState",
    "getState",
    "videoElement",
    "reOpenDialog",
    "playList",
    "stop",
    "useEffect",
    "setInterval",
    "paused",
    "Slider",
    "className",
    "defaultValue",
    "value",
    "min",
    "color",
    "max",
    "duration",
    "valueLabelDisplay",
    "onChangeCommitted",
    "_ref",
    "_callee",
    "x",
    "_context",
    "abrupt",
    "_x2",
    "_x3",
    "hidden",
    "ComponentStates",
    "IconButton",
    "onClick",
    "pauseAudio",
    "Pause",
    "button",
    "setButton",
    "pause",
    "playAudio",
    "PlayCircleOutline",
    "play",
    "document",
    "addEventListener",
    "e",
    "Dialog",
    "dialog",
    "AppBar",
    "style",
    "position",
    "top",
    "bottom",
    "width",
    "component",
    "elevation",
    "src",
    "snippet",
    "thumbnails",
    "high",
    "url",
    "height",
    "maxWidth",
    "maxHeight",
    "alt",
    "Typography",
    "title",
    "Audio",
    "Player_CustomMiniPlayerSlider"
  ],
  "mappings": "kNAEeA,EAAAC,OAAAC,EAAA,GAAcC,EAAAC,EAAKC,cAAA,QAClCC,EAAA,0GACC,0CCyCcC,cAJS,SAAAC,GAAK,MAAK,CAC9BC,eAAgBD,EAAME,YAAYD,eAClCE,aAAcH,EAAME,YAAYC,eAErBJ,CAvCgB,SAACK,GAC5B,IAAKA,EAAMH,eAAeI,WACtB,OAAOV,EAAAC,EAAAC,cAAAF,EAAAC,EAAAU,SAAA,MAF2B,IAAAC,EAIJC,IAAMC,SAASL,EAAMD,aAAaO,aAJ9BC,EAAAlB,OAAAmB,EAAA,EAAAnB,CAAAc,EAAA,GAI/BM,EAJ+BF,EAAA,GAIpBG,EAJoBH,EAAA,YAWvBI,EAXuBC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,WAAA,SAAAH,IAAA,OAAAA,EAAAxB,OAAA4B,EAAA,EAAA5B,CAAA6B,EAAA1B,EAAA2B,KAWtC,SAAAC,EAA+BC,GAA/B,OAAAH,EAAA1B,EAAA8B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACQC,SAASL,KACTrB,EAAMD,aAAaO,YAAce,EAEjCM,IAAMC,SAASC,YACX7B,EAAMD,aACN4B,IAAMG,WAAWhC,YAAYiC,aAC7BJ,IAAMG,WAAWhC,YAAYD,eAC7B8B,IAAMG,WAAWhC,YAAYkC,aAC7BL,IAAMG,WAAWhC,YAAYmC,YATzC,wBAAAV,EAAAW,SAAAd,OAXsCN,MAAAC,KAAAC,WAwBtC,OAnBAmB,oBAAU,WACFnC,EAAMH,eAAeI,YACrBmC,YAAY,kBAAOpC,EAAMD,aAAasC,QAAUrC,EAAMH,eAAeI,WAAaS,EAAaV,EAAMD,aAAaO,aAAe,MAAM,MAE5I,IAeKf,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CACJC,UAAW,UACXC,aAAc,EACdC,MAAOhC,EACPiC,IAAK,EACLC,MAAO,UACPC,IAAK5C,EAAMD,aAAa8C,SACxBC,kBAAkB,OAClBC,kBAAiB,eAAAC,EAAA3D,OAAA4B,EAAA,EAAA5B,CAAA6B,EAAA1B,EAAA2B,KAAE,SAAA8B,EAAO5B,EAAG6B,GAAV,OAAAhC,EAAA1B,EAAA8B,KAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,cAAA0B,EAAAC,OAAA,SAAgBzC,EAAgBuC,IAAhC,wBAAAC,EAAAjB,SAAAe,MAAF,gBAAAI,EAAAC,GAAA,OAAAN,EAAAlC,MAAAC,KAAAC,YAAA,OCmFVrB,sBAPS,SAAAC,GAAK,MAAK,CAC9BC,eAAgBD,EAAME,YAAYD,eAClCE,aAAcH,EAAME,YAAYC,aAChCgC,aAAcnC,EAAME,YAAYiC,aAChCC,aAAcpC,EAAME,YAAYkC,aAChCC,SAAUrC,EAAME,YAAYmC,WAEjBtC,CA9GI,SAACK,GAChB,GAAIA,EAAMuD,OAAQ,OAAOhE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAU,SAAA,MACzB,IACIsD,EAAkBxD,EAAMH,eACxBE,EAAeC,EAAMD,aACrBgC,EAAe/B,EAAM+B,aALC5B,EAMEC,IAAMC,SAASd,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAYC,QAASC,GAAYpE,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAOjB,MAAO,WANhEpC,EAAAlB,OAAAmB,EAAA,EAAAnB,CAAAc,EAAA,GAMnB0D,EANmBtD,EAAA,GAMXuD,EANWvD,EAAA,GAwB1B,SAASoD,IACL5D,EAAagE,QACbD,EAAUvE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAYC,QAASM,GAAWzE,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAmBtB,MAAO,WAIxE,SAASqB,IACLjE,EAAamE,OACbJ,EAAUvE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAYC,QAASC,GAAYpE,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CACvCjB,MAAO,WAwBf,OArBAR,oBAAU,WAQNgC,SAASC,iBAAiB,YAAa,SAAUC,GAC7CrE,EAAMgC,eAENL,IAAMC,SAASC,YAAoB9B,EAAcgC,EAAc,CAC3DuC,QAAQ,EACRrE,YAAY,GACbD,EAAMgC,aAAchC,EAAMiC,WACzBjC,EAAMH,eAAeyE,QACrB3C,IAAMG,WAAWhC,YAAYkC,oBAKpCwB,EAAgBe,QAAUf,EAAgBvD,YAA+B,OAAjBF,EAErDR,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CAAQ7B,MAAO,0BAA2B8B,MAAO,CAC7CC,SAAU,QACVC,IAAK,OACLC,OAAQ,SACRC,MAAO,QACRC,UAAW,MAAOC,UAAW,EAAGxC,UAAW,4CAC1ChD,EAAAC,EAAAC,cAAA,OAAK8C,UAAW,iBACZhD,EAAAC,EAAAC,cAAA,OAAKiE,QAAS,WACV1D,EAAMgC,eAENL,IAAMC,SAASC,YAAoB9B,EAAcgC,EAAc,CAC3DuC,QAAQ,EACRrE,YAAY,GACbD,EAAMgC,aAAchC,EAAMiC,WACzBjC,EAAMH,eAAeyE,QACrB3C,IAAMG,WAAWhC,YAAYkC,gBAElCO,UAAW,iBACVhD,EAAAC,EAAAC,cAAA,OAAKuF,IAAKjD,EAAakD,QAAQC,WAAWC,KAAKC,IAAKX,MAAO,CACvDI,MAAO,OACPQ,OAAQ,OACRC,SAAU,iBACVC,UAAW,kBAEVC,IAAK,aAAcjD,UAAW,2BACnChD,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAYX,UAAW,OAAQvC,UAAW,0CAC9BI,MAAO,OAAQ8B,MAAO,CAC9BI,MAAO,OACPlC,MAAO,4BACPZ,EAAakD,QAAQS,OAAS,aAGtCnG,EAAAC,EAAAC,cAAA,OAAK8C,UAAS,uBACTsB,EACDtE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAYC,QA7EhC,WACI3D,EAAagE,QACbpC,IAAMC,SAASC,YAAoB,IAAI8D,MAAM,IAAK5D,EAAc,CAC5DuC,QAAQ,EACRrE,YAAY,GACbD,EAAMgC,aAAchC,EAAMiC,aAwE6B1C,EAAAC,EAAAC,cAACL,EAAD,SAGlDG,EAAAC,EAAAC,cAACmG,EAAD,OAIJrG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAU,SAAA",
  "file": "static/js/14.c91b8d59.chunk.js",
  "sourcesContent": [
    "import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"\n}), 'Close');",
    "import React, {useEffect} from \"react\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport store from \"../../Redux/store/store\";\r\nimport {setCurrentSongState} from \"../../Redux/actions/actions\";\r\nimport {connect} from \"react-redux\";\r\n\r\nconst CustomMiniPlayerSlider = (props) => {\r\n    if (!props.componentState.MiniPlayer) {\r\n        return <></>;\r\n    }\r\n    const [scrubbing, setScrubbing] = React.useState(props.audioElement.currentTime);\r\n    useEffect(() => {\r\n        if (props.componentState.MiniPlayer) {\r\n            setInterval(() => !props.audioElement.paused && props.componentState.MiniPlayer ? setScrubbing(props.audioElement.currentTime) : null, 1000);\r\n        }\r\n    }, []);\r\n\r\n    async function handleScrubbing(v) {\r\n        if (isFinite(v)) {\r\n            props.audioElement.currentTime = v;\r\n            // Update Redux State\r\n            store.dispatch(setCurrentSongState(\r\n                props.audioElement,\r\n                store.getState().currentSong.videoElement,\r\n                store.getState().currentSong.componentState,\r\n                store.getState().currentSong.reOpenDialog,\r\n                store.getState().currentSong.playList));\r\n        }\r\n    }\r\n\r\n    return (<Slider\r\n        className={'p-0 m-0'}\r\n        defaultValue={0}\r\n        value={scrubbing}\r\n        min={0.0}\r\n        color={'primary'}\r\n        max={props.audioElement.duration}\r\n        valueLabelDisplay=\"auto\"\r\n        onChangeCommitted={async (v, x) => handleScrubbing(x)}\r\n    />);\r\n};\r\nconst mapStateToProps = state => ({\r\n    componentState: state.currentSong.componentState,\r\n    audioElement: state.currentSong.audioElement,\r\n});\r\nexport default connect(mapStateToProps)(CustomMiniPlayerSlider);\r\n",
    "import AppBar from \"@material-ui/core/AppBar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport {Close, Pause, PlayCircleOutline} from \"@material-ui/icons\";\r\nimport React, {useEffect} from \"react\";\r\nimport store from \"../../Redux/store/store\";\r\nimport {setCurrentSongState} from \"../../Redux/actions/actions\";\r\nimport {connect} from \"react-redux\";\r\nimport CustomMiniPlayerSlider from \"./CustomMiniPlayerSlider\";\r\n\r\n\r\nconst MiniPlayer = (props) => {\r\n    if (props.hidden) return <></>;\r\n    const\r\n        ComponentStates = props.componentState,\r\n        audioElement = props.audioElement,\r\n        videoElement = props.videoElement;\r\n    const [button, setButton] = React.useState(<IconButton onClick={pauseAudio}><Pause color={'#fff'}/></IconButton>);\r\n\r\n    async function handleScrubbing(v) {\r\n        if (isFinite(v)) {\r\n            audioElement.currentTime = v;\r\n            // Update Redux State\r\n            store.dispatch(setCurrentSongState(audioElement, videoElement, {...ComponentStates}));\r\n        }\r\n    }\r\n\r\n    function cutCurrentSongState() {\r\n        audioElement.pause();\r\n        store.dispatch(setCurrentSongState(new Audio(''), videoElement, {\r\n            Dialog: false,\r\n            MiniPlayer: false\r\n        }, props.reOpenDialog, props.playList));\r\n    }\r\n\r\n    function pauseAudio() {\r\n        audioElement.pause();\r\n        setButton(<IconButton onClick={playAudio}><PlayCircleOutline color={'#fff'}/></IconButton>);\r\n\r\n    }\r\n\r\n    function playAudio() {\r\n        audioElement.play();\r\n        setButton(<IconButton onClick={pauseAudio}><Pause\r\n            color={'#fff'}/></IconButton>);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // TODO Because you lisened to travis scott\r\n        // Record artist name to database for that user\r\n        // Search Yt for artist name\r\n        // Show Because You Listened to travis scott\r\n\r\n        const Mounted = true;\r\n        if (!Mounted) return null;\r\n        document.addEventListener('swiped-up', function (e) {\r\n            props.reOpenDialog();\r\n            // Update Redux State\r\n            store.dispatch(setCurrentSongState(audioElement, videoElement, {\r\n                Dialog: true,\r\n                MiniPlayer: false\r\n            }, props.reOpenDialog, props.playList));\r\n            if (props.componentState.Dialog) {\r\n                store.getState().currentSong.reOpenDialog();\r\n            }\r\n        });\r\n    });\r\n\r\n    if (!ComponentStates.dialog && ComponentStates.MiniPlayer && audioElement !== null || '' || undefined) {\r\n        return (\r\n            <AppBar color={'primary.miniPlayer.main'} style={{\r\n                position: 'fixed',\r\n                top: \"auto\",\r\n                bottom: '3.5rem',\r\n                width: '100%',\r\n            }} component={'div'} elevation={1} className={'d-inline-flex KabeersMiniPlayerContainer'}>\r\n                <div className={'d-inline-flex'}>\r\n                    <div onClick={() => {\r\n                        props.reOpenDialog();\r\n                        // Update Redux State\r\n                        store.dispatch(setCurrentSongState(audioElement, videoElement, {\r\n                            Dialog: true,\r\n                            MiniPlayer: false\r\n                        }, props.reOpenDialog, props.playList));\r\n                        if (props.componentState.Dialog) {\r\n                            store.getState().currentSong.reOpenDialog();\r\n                        }\r\n                    }} className={'d-inline-flex'}>\r\n                        <img src={videoElement.snippet.thumbnails.high.url} style={{\r\n                            width: '4rem',\r\n                            height: '3rem',\r\n                            maxWidth: '5rem!important',\r\n                            maxHeight: '4rem!important'\r\n                        }}\r\n                             alt={'Song Image'} className={'KabeersMiniPlayerImage'}/>\r\n                        <Typography component={'span'} className={'text-truncate p-2 KabeersMiniPlayerText'}\r\n                                    color={'#000'} style={{\r\n                            width: '10em',\r\n                            color: 'primary.miniPlayer.text'\r\n                        }}>{videoElement.snippet.title || 'Untitled'}\r\n                        </Typography>\r\n                    </div>\r\n                    <div className={`float-right ml-auto`}>\r\n                        {button}\r\n                        <IconButton onClick={cutCurrentSongState}><Close/></IconButton>\r\n                    </div>\r\n                </div>\r\n                <CustomMiniPlayerSlider/>\r\n            </AppBar>\r\n        );\r\n    }\r\n    return (<></>)\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    componentState: state.currentSong.componentState,\r\n    audioElement: state.currentSong.audioElement,\r\n    videoElement: state.currentSong.videoElement,\r\n    reOpenDialog: state.currentSong.reOpenDialog,\r\n    playList: state.currentSong.playList\r\n});\r\nexport default connect(mapStateToProps)(MiniPlayer);\r\n"
  ],
  "sourceRoot": ""
}
