{
  "version": 3,
  "sources": [
    "components/SearchComponent/SearchComponent.js"
  ],
  "names": [
    "useStyles",
    "makeStyles",
    "theme",
    "root",
    "marginTop",
    "padding",
    "display",
    "alignItems",
    "width",
    "input",
    "marginLeft",
    "spacing",
    "flex",
    "iconButton",
    "divider",
    "height",
    "margin",
    "SearchComponent",
    "props",
    "history",
    "useHistory",
    "_React$useState",
    "React",
    "useState",
    "_React$useState2",
    "Object",
    "E_Projects_phpstormprojects_music_react_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__",
    "open",
    "setOpen",
    "_React$useState3",
    "_React$useState4",
    "_React$useState5",
    "_React$useState6",
    "queryArray",
    "setQueryArray",
    "_React$useState7",
    "react__WEBPACK_IMPORTED_MODULE_3___default",
    "a",
    "createElement",
    "className",
    "style",
    "position",
    "top",
    "left",
    "transform",
    "src",
    "alt",
    "_React$useState8",
    "listItems",
    "setListItems",
    "classes",
    "Search",
    "_ref",
    "E_Projects_phpstormprojects_music_react_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__",
    "E_Projects_phpstormprojects_music_react_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default",
    "mark",
    "_callee",
    "e",
    "wrap",
    "_context",
    "prev",
    "next",
    "SuggestSearch",
    "target",
    "value",
    "then",
    "v",
    "map",
    "index",
    "_material_ui_core_ListItem__WEBPACK_IMPORTED_MODULE_13__",
    "button",
    "key",
    "component",
    "Link",
    "to",
    "_material_ui_core_ListItemIcon__WEBPACK_IMPORTED_MODULE_14__",
    "_material_ui_icons__WEBPACK_IMPORTED_MODULE_9__",
    "_material_ui_core_ListItemText__WEBPACK_IMPORTED_MODULE_15__",
    "primary",
    "concat",
    "suggestion",
    "attributes",
    "data",
    "push",
    "pathname",
    "search",
    "URLSearchParams",
    "q",
    "toString",
    "store",
    "dispatch",
    "setQueryParams",
    "stop",
    "_x",
    "apply",
    "this",
    "arguments",
    "_material_ui_core_Dialog__WEBPACK_IMPORTED_MODULE_5__",
    "fullScreen",
    "onClose",
    "_material_ui_core_AppBar__WEBPACK_IMPORTED_MODULE_6__",
    "_material_ui_core_Toolbar__WEBPACK_IMPORTED_MODULE_7__",
    "window",
    "_material_ui_core_IconButton__WEBPACK_IMPORTED_MODULE_8__",
    "onClick",
    "color",
    "visibility",
    "_material_ui_icons__WEBPACK_IMPORTED_MODULE_10__",
    "Fragment",
    "_material_ui_core_InputBase__WEBPACK_IMPORTED_MODULE_11__",
    "autoCapitalize",
    "autoComplete",
    "autoFocus",
    "onKeyUp",
    "onKeyDown",
    "getState",
    "onFocus",
    "onBlur",
    "placeholder",
    "inputProps",
    "aria-label",
    "class",
    "defaultProps",
    "connect",
    "state",
    "query"
  ],
  "mappings": "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",
  "file": "static/js/15.3620ebd4.chunk.js",
  "sourcesContent": [
    "import React from 'react';\nimport './SearchComponent.css';\nimport Dialog from \"@material-ui/core/Dialog\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport {ArrowBack, SearchOutlined} from \"@material-ui/icons\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport {SuggestSearch} from \"../../functions/suggestSearch\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport {Link, useHistory} from \"react-router-dom\";\nimport store from \"../../Redux/store/store\";\nimport {connect} from \"react-redux\";\nimport {setQueryParams} from \"../../Redux/actions/actions\";\nimport {Button} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginTop: '1rem',\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width: '100%',\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n}));\nconst SearchComponent = (props) => {\n    let history = useHistory();\n    const [open, setOpen] = React.useState(true);\n    const [query, setQuery] = React.useState('');\n    const [queryArray, setQueryArray] = React.useState([]);\n    const [listItems, setListItems] = React.useState(\n        <div className={'errorPage text-center'}\n             style={{\n                 position: 'absolute',\n                 top: '50%',\n                 left: '50%',\n                 transform: 'translate(-50%, -50%)'\n             }}>\n            <img src={'./assets/icons/darkmode_nothingfound.svg'} style={{width: '8rem', height: \"auto\"}}\n                 alt={'Kabeers Music Logo'}/>\n            <br/>\n            <div>Results will appear as you  type</div>\n        </div>);\n    const classes = useStyles();\n    const ListItems = () => {\n        if (!queryArray) return;\n        setListItems(() => queryArray.map((value, index) => {\n            if (!value) return;\n            return (\n                <ListItem button key={index} component={Link} to={'/search/results'}>\n                    <ListItemIcon>\n                        <SearchOutlined/>\n                    </ListItemIcon>\n                    <ListItemText primary={`${value.suggestion.attributes.data}`}/>\n                </ListItem>\n            );\n        }));\n    };\n\n    const Search = async (e) => {\n        SuggestSearch(e.target.value).then(v => setQueryArray(v));\n        ListItems();\n        props.history.push({\n            pathname: `search`,\n            search: \"?\" + new URLSearchParams({q: e.target.value}).toString()\n        });\n        store.dispatch(setQueryParams(e.target.value));\n    };\n    const handleEnterPress = (e) => {\n        if (e.key === 'Enter') {\n            const query = store.getState().q;\n            if (query) return history.push(\"/search/results\");\n        }\n    };\n    return (\n        <div className=\"SearchComponent\">\n            <Dialog fullScreen open={open} onClose={() => {\n            }}>\n                <AppBar className={`fixed-top`}>\n                    <Toolbar>\n                        {window.history ? <IconButton onClick={() => {\n                            setOpen(false);\n                        }} component={Link} to={'/home'} color=\"primary.light\" visibility={false}>\n                            <ArrowBack/>\n                        </IconButton> : <></>}\n                        <InputBase\n                            autoCapitalize={true}\n                            autoComplete={true}\n                            autoFocus={true}\n                            onKeyUp={Search}\n                            onKeyDown={handleEnterPress}\n                            onFocus={() => {\n\n                            }}\n                            onBlur={() => {\n                                // search_iconChange('visible');\n                                // toolbar_colorChange('#CCC')\n                            }}\n                            className={`${classes.input} text-light`}\n                            placeholder=\"Search Kabeers Music\"\n                            inputProps={{'aria-label': 'Search Kabeers Music'}}\n                        />\n                        <SearchOutlined visibility={false}/>\n                    </Toolbar>\n                </AppBar>\n                <div class=\"container px-3\" style={{marginTop: \"4rem\"}}>\n                    <div class=\"row\">\n                        {listItems}\n                    </div>\n                </div>\n            </Dialog>\n        </div>\n    )\n};\n\nSearchComponent.propTypes = {};\n\nSearchComponent.defaultProps = {};\n\nconst mapStateToProps = state => ({\n    query: state.q,\n});\nexport default connect(mapStateToProps)(SearchComponent);\n"
  ],
  "sourceRoot": ""
}
